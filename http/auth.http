@baseUrl = {{baseUrl}}
@username = httpuser{{$randomInt}}
@password = Sup3rSecret!23

### Register User
POST {{baseUrl}}/auth/register
Content-Type: application/json
Accept: application/json

{
  "username": "{{username}}",
  "password": "{{password}}"
}

> {% client.test("Registration succeeds", function() {
    client.assert(response.status === 201);
    client.assert(response.body.access);
    client.assert(response.body.refresh);
    client.global.set("accessToken", response.body.access);
    client.global.set("refreshToken", response.body.refresh);
    client.global.set("username", "{{username}}");
    client.global.set("password", "{{password}}");
}); %}

### Login With Stored Credentials
POST {{baseUrl}}/auth/password?u={{username}}&p={{password}}
Accept: application/json

> {% client.test("Login returns tokens", function() {
    client.assert(response.status === 200);
    client.assert(response.body.access);
    client.assert(response.body.refresh);
    client.global.set("accessToken", response.body.access);
    client.global.set("refreshToken", response.body.refresh);
}); %}

### Refresh Access Token
POST {{baseUrl}}/auth/refresh?rid={{refreshToken}}
Accept: application/json

> {% client.test("Refresh rotates token", function() {
    client.assert(response.status === 200);
    client.assert(response.body.access);
    client.assert(response.body.refresh);
    client.assert(response.body.refresh !== client.global.get("refreshToken"));
    client.global.set("accessToken", response.body.access);
    client.global.set("refreshToken", response.body.refresh);
}); %}

### Failed Login Attempt
POST {{baseUrl}}/auth/password?u={{username}}&p={{password}}x
Accept: application/json

> {% client.test("Bad password rejected", function() {
    client.assert(response.status === 401);
}); %}
